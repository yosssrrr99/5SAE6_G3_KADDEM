pipeline {
    agent any
       environment {
            NEXUS_VERSION = "nexus3"
            NEXUS_PROTOCOL = "http"
            NEXUS_URL = "192.168.33.10:8081"
            NEXUS_REPOSITORY = "TestKaddem"
            NEXUS_CREDENTIAL_ID = "nexus-cred"
    }
    stages {
        stage('Nettoyage et compilation Maven') {
            steps {
                // Cette Ã©tape va nettoyer et compiler le projet avec Maven
                sh 'mvn clean compile'
            }
        }
        stage('SonarQube analyse') {
            steps {
               script {
                   withSonarQubeEnv(installationName: 'sq1') {
                       sh 'mvn sonar:sonar'
                   }
               }
             }
        }
        stage('Junit test') {
            steps {
               script {
                       sh 'mvn test -Dtest=EtudiantRepositoryWithUnitTest'
                      }
                 }
           }
            stage('fichier jar') {
                       steps {
                          script {
                                  sh 'mvn install -DskipTests'
                                 }
                            }
                      }
           stage("Nexus") {
                       steps {
                           script {
                               pom = readMavenPom file: "pom.xml";
                               filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                               echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                               artifactPath = filesByGlob[0].path;
                               artifactExists = fileExists artifactPath;
                               if(artifactExists) {
                                   echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                                   nexusArtifactUploader(
                                       nexusVersion: NEXUS_VERSION,
                                       protocol: NEXUS_PROTOCOL,
                                       nexusUrl: NEXUS_URL,
                                       groupId: pom.groupId,
                                       version: pom.version,
                                       repository: NEXUS_REPOSITORY,
                                       credentialsId: NEXUS_CREDENTIAL_ID,
                                       artifacts: [
                                           [artifactId: pom.artifactId,
                                           classifier: '',
                                           file: artifactPath,
                                           type: pom.packaging],
                                           [artifactId: pom.artifactId,
                                           classifier: '',
                                           file: "pom.xml",
                                           type: "pom"]
                                       ]
                                   );
                               } else {
                                   error "* File: ${artifactPath}, could not be found";
                               }
                           }
                       }
                   }


           stage ("Build docker image") {
                               steps {
                                   sh 'docker rmi yosrsahnoun/kaddem-docker'
                                   sh 'docker build -t yosrsahnoun/kaddem-docker  .'
                                   sh 'docker pull mysql:5.7'
                               }
                       }
                 /*  stage ("Push docker image") {
                               steps {
                                   script {
                                   withCredentials([usernamePassword(credentialsId: 'docker-ka', usernameVariable: 'dockeruser', passwordVariable: 'dockerpwd')]) {
                                   sh "docker login -u ${dockeruser} -p ${dockerpwd}"
                                   sh 'docker push yosrsahnoun/kaddem-docker'
                                   }
                                   }
                               }
                       }*/
                   stage ("Docker-Compose") {
                               steps {
                                   sh 'docker compose down'
                                   sh 'docker compose up -d'
                               }
                       }





       }
   }